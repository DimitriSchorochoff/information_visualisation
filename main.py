# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main3.2.ui'
#
# Created by: PyQt5 UI code generator 5.15.5
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtWidgets,QtWebEngineWidgets
from PyQt5.QtCore import QObject, QThread, pyqtSignal
import pathlib

from PyQt5.QtWidgets import QMessageBox

import build_graph
import classes

FILE_NODES_PATH = None
FILE_EDGES_PATH = None
DEBUG = True

if DEBUG:
    FILE_NODES_PATH = r"d:\Users\Home\Documents\Unif\M1 Q1\information_visualisation\Data\BIOGRID-PROJECT-glioblastoma_project-GENES.projectindex.txt"
    FILE_EDGES_PATH = r"d:\Users\Home\Documents\Unif\M1 Q1\information_visualisation\Data\BIOGRID-PROJECT-glioblastoma_project-INTERACTIONS.tab3.txt"
    #FILE_NODES_PATH = r"C:\Users\dimis\OneDrive\Documents\GitHub\information_visualisation\Data\BIOGRID-PROJECT-glioblastoma_project-GENES.projectindex.txt"
    #FILE_EDGES_PATH = r"C:\Users\dimis\OneDrive\Documents\GitHub\information_visualisation\Data\BIOGRID-PROJECT-glioblastoma_project-INTERACTIONS.tab3.txt"


class Ui_MainWindow(object):

    def setupUi(self, MainWindow):
        self.list_layout = [classes.Layout("Barnes Hut", [classes.Layout_parameter_value("Barnes Hut", -100000, -3000, -80000, 500),classes.Layout_parameter_boolean("Barnes Hut")]), classes.Layout("Force Atlas 2Based", [classes.Layout_parameter_value("Force Atlas 2Based", -100, -20, -50, 20),classes.Layout_parameter_boolean("Force Atlas 2Based")]), classes.Layout("Repulsion", [classes.Layout_parameter_value("Repulsion", 10, 500, 100, 50),classes.Layout_parameter_boolean("Repulsion")])]

        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")

        self.webEngineView = QtWebEngineWidgets.QWebEngineView(self.centralwidget)
        self.graph = build_graph.load_graph_from_csv(FILE_NODES_PATH, FILE_EDGES_PATH)

        self.verticalLayout.addWidget(self.webEngineView,70)

        self.main_tab_widget = QtWidgets.QTabWidget(self.centralwidget)
        self.main_tab_widget.setObjectName("main_tab_widget")


        self.tab_layout = QtWidgets.QWidget()
        self.tab_layout.setObjectName("tab_layout")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.tab_layout)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.layout_layout_left = QtWidgets.QVBoxLayout()
        self.layout_layout_left.setObjectName("layout_layout_left")
        self.layout_filter_layout = QtWidgets.QHBoxLayout()
        self.layout_filter_layout.setObjectName("layout_filter_layout")
        self.layout_filter_line_edit = QtWidgets.QLineEdit(self.tab_layout)
        self.layout_filter_line_edit.setObjectName("layout_filter_line_edit")
        self.layout_filter_layout.addWidget(self.layout_filter_line_edit)

        self.layout_filter_button = QtWidgets.QPushButton(self.tab_layout)
        self.layout_filter_button.setObjectName("layout_filter_button")
        self.layout_filter_button.clicked.connect(
            lambda: self.selection_list_filter(self.layout_selection_list, self.layout_filter_line_edit.text()))
        self.layout_filter_layout.addWidget(self.layout_filter_button)

        self.layout_layout_left.addLayout(self.layout_filter_layout)
        self.layout_selection_list = QtWidgets.QListWidget(self.tab_layout)
        self.layout_selection_list.itemClicked.connect(
            lambda item: self.layout_selection_list_on_item_click(self.layout_selection_list.currentRow()))
        self.layout_selection_list.setObjectName("layout_selection_list")
        self.layout_selection_list_init()
        self.layout_layout_left.addWidget(self.layout_selection_list)
        self.horizontalLayout_2.addLayout(self.layout_layout_left, 4)

        self.layout_layout_right = QtWidgets.QVBoxLayout()
        self.layout_layout_right.setObjectName("layout_layout_right")
        self.layout_layout_right_widget_lst = []
        self.horizontalLayout_2.addLayout(self.layout_layout_right, 5)

        self.layout_build_button = QtWidgets.QPushButton(self.tab_layout)
        self.layout_build_button.setObjectName("layout_build_button")
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.layout_build_button.sizePolicy().hasHeightForWidth())
        self.layout_build_button.setSizePolicy(sizePolicy)
        self.layout_build_button.clicked.connect(self.runComputeAndDisplayGraph)
        self.horizontalLayout_2.addWidget(self.layout_build_button, 1)
        self.main_tab_widget.addTab(self.tab_layout, "")


        self.tab_attrib = QtWidgets.QWidget()
        self.tab_attrib.setObjectName("tab_attrib")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.tab_attrib)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.tab_attr_vertical_left = QtWidgets.QVBoxLayout()
        self.tab_attr_vertical_left.setObjectName("tab_attr_vertical_left")
        self.attr_filter_attr_layout = QtWidgets.QHBoxLayout()
        self.attr_filter_attr_layout.setObjectName("attr_filter_attr_layout")
        self.atttr_filter_attr_line_edit = QtWidgets.QLineEdit(self.tab_attrib)
        self.atttr_filter_attr_line_edit.setObjectName("atttr_filter_attr_line_edit")
        self.attr_filter_attr_layout.addWidget(self.atttr_filter_attr_line_edit)
        self.attr_filter_attr_button = QtWidgets.QPushButton(self.tab_attrib)
        self.attr_filter_attr_button.setObjectName("attr_filter_attr_button")
        self.attr_filter_attr_button.clicked.connect(lambda: self.selection_list_filter(self.attr_selection_list, self.atttr_filter_attr_line_edit.text()))
        self.attr_filter_attr_layout.addWidget(self.attr_filter_attr_button)
        self.tab_attr_vertical_left.addLayout(self.attr_filter_attr_layout, 4)

        self.attr_selection_list = QtWidgets.QListWidget(self.tab_attrib)
        self.attr_selection_list.setObjectName("attr_selection_list")
        self.attr_selection_list_init()
        self.tab_attr_vertical_left.addWidget(self.attr_selection_list)
        self.horizontalLayout.addLayout(self.tab_attr_vertical_left)
        self.tab_attr_vertical_right = QtWidgets.QVBoxLayout()
        self.tab_attr_vertical_right.setObjectName("tab_attr_vertical_right")
        self.label = QtWidgets.QLabel(self.tab_attrib)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        self.label.setObjectName("label")
        self.tab_attr_vertical_right.addWidget(self.label)
        self.attr_scale_with_size_hlayout = QtWidgets.QHBoxLayout()
        self.attr_scale_with_size_hlayout.setObjectName("attr_scale_with_size_hlayout")
        self.attr_scale_with_size_checkbox = QtWidgets.QCheckBox(self.tab_attrib)
        self.attr_scale_with_size_checkbox.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.attr_scale_with_size_checkbox.setObjectName("attr_scale_with_size_checkbox")
        self.attr_scale_with_size_hlayout.addWidget(self.attr_scale_with_size_checkbox)

        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.attr_scale_with_size_hlayout.addItem(spacerItem)
        self.tab_attr_vertical_right.addLayout(self.attr_scale_with_size_hlayout)
        self.attr_slider_hlayout = QtWidgets.QHBoxLayout()
        self.attr_slider_hlayout.setObjectName("attr_slider_hlayout")
        self.attr_filter_label = QtWidgets.QLabel(self.tab_attrib)
        self.attr_filter_label.setObjectName("attr_filter_label")
        self.attr_slider_hlayout.addWidget(self.attr_filter_label)
        self.attr_filter_min = QtWidgets.QSpinBox(self.tab_attrib)
        self.attr_filter_min.setObjectName("attr_filter_min")
        self.attr_slider_hlayout.addWidget(self.attr_filter_min)
        self.attr_filter_range_slider = QtWidgets.QSlider(self.tab_attrib)
        self.attr_filter_range_slider.setOrientation(QtCore.Qt.Horizontal)
        self.attr_filter_range_slider.setObjectName("attr_filter_range_slider")
        self.attr_slider_hlayout.addWidget(self.attr_filter_range_slider)
        self.attr_filter_max = QtWidgets.QSpinBox(self.tab_attrib)
        self.attr_filter_max.setObjectName("attr_filter_max")
        self.attr_slider_hlayout.addWidget(self.attr_filter_max)
        self.tab_attr_vertical_right.addLayout(self.attr_slider_hlayout)
        self.horizontalLayout.addLayout(self.tab_attr_vertical_right, 6)

        self.attrib_build_button = QtWidgets.QPushButton(self.tab_layout)
        self.attrib_build_button.setObjectName("attrib_build_button")
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.attrib_build_button.sizePolicy().hasHeightForWidth())
        self.attrib_build_button.setSizePolicy(sizePolicy)
        self.attrib_build_button.clicked.connect(self.runComputeAndDisplayGraph)
        self.horizontalLayout.addWidget(self.attrib_build_button, 1)

        self.main_tab_widget.addTab(self.tab_attrib, "")


        self.tab_node_edge = QtWidgets.QWidget()
        self.tab_node_edge.setObjectName("tab_node_edge")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.tab_node_edge)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.node_vlayout_left = QtWidgets.QVBoxLayout()
        self.node_vlayout_left.setObjectName("node_vlayout_left")
        self.node_filter_hlayout = QtWidgets.QHBoxLayout()
        self.node_filter_hlayout.setObjectName("node_filter_hlayout")
        self.node_filter_edit = QtWidgets.QLineEdit(self.tab_node_edge)
        self.node_filter_edit.setObjectName("node_filter_edit")
        self.node_filter_hlayout.addWidget(self.node_filter_edit)

        self.node_filter_button = QtWidgets.QPushButton(self.tab_node_edge)
        self.node_filter_button.setObjectName("node_filter_button")
        self.node_filter_button.clicked.connect(lambda : self.selection_list_filter(self.node_selection_list, self.node_filter_edit.text()))

        self.node_filter_hlayout.addWidget(self.node_filter_button)
        self.node_vlayout_left.addLayout(self.node_filter_hlayout)
        self.node_selection_list = QtWidgets.QListWidget(self.tab_node_edge)
        self.node_selection_list.setObjectName("node_selection_list")
        self.node_selection_list_init()
        self.node_vlayout_left.addWidget(self.node_selection_list)
        self.horizontalLayout_3.addLayout(self.node_vlayout_left, 4)

        self.node_vlayout_right = QtWidgets.QVBoxLayout()
        self.node_vlayout_right.setObjectName("node_vlayout_right")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_3.addItem(spacerItem1)
        self.label_5 = QtWidgets.QLabel(self.tab_node_edge)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_5.sizePolicy().hasHeightForWidth())
        self.label_5.setSizePolicy(sizePolicy)
        self.label_5.setObjectName("label_5")
        self.verticalLayout_3.addWidget(self.label_5)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.label_4 = QtWidgets.QLabel(self.tab_node_edge)
        self.label_4.setObjectName("label_4")
        self.horizontalLayout_4.addWidget(self.label_4)
        self.spinBox_2 = QtWidgets.QSpinBox(self.tab_node_edge)
        self.spinBox_2.setObjectName("spinBox_2")
        self.horizontalLayout_4.addWidget(self.spinBox_2)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem2)
        self.verticalLayout_3.addLayout(self.horizontalLayout_4)
        spacerItem3 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_3.addItem(spacerItem3)
        self.node_vlayout_right.addLayout(self.verticalLayout_3)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.checkBox_2 = QtWidgets.QCheckBox(self.tab_node_edge)
        self.checkBox_2.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.checkBox_2.setObjectName("checkBox_2")
        self.horizontalLayout_6.addWidget(self.checkBox_2)
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_6.addItem(spacerItem4)
        self.verticalLayout_2.addLayout(self.horizontalLayout_6)
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.label_2 = QtWidgets.QLabel(self.tab_node_edge)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_7.addWidget(self.label_2)
        self.spinBox = QtWidgets.QSpinBox(self.tab_node_edge)
        self.spinBox.setObjectName("spinBox")
        self.horizontalLayout_7.addWidget(self.spinBox)
        spacerItem5 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_7.addItem(spacerItem5)
        self.verticalLayout_2.addLayout(self.horizontalLayout_7)
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.label_3 = QtWidgets.QLabel(self.tab_node_edge)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_8.addWidget(self.label_3)
        self.fontComboBox = QtWidgets.QFontComboBox(self.tab_node_edge)
        self.fontComboBox.setObjectName("fontComboBox")
        self.horizontalLayout_8.addWidget(self.fontComboBox)
        spacerItem6 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_8.addItem(spacerItem6)
        self.verticalLayout_2.addLayout(self.horizontalLayout_8)
        spacerItem7 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_2.addItem(spacerItem7)
        self.node_vlayout_right.addLayout(self.verticalLayout_2)
        self.horizontalLayout_3.addLayout(self.node_vlayout_right, 6)

        self.node_build_button = QtWidgets.QPushButton(self.tab_layout)
        self.node_build_button.setObjectName("node_build_button")
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.node_build_button.sizePolicy().hasHeightForWidth())
        self.node_build_button.setSizePolicy(sizePolicy)
        self.node_build_button.clicked.connect(self.runComputeAndDisplayGraph)
        self.horizontalLayout_3.addWidget(self.node_build_button, 1)

        self.main_tab_widget.addTab(self.tab_node_edge, "")




        self.tab_edge = QtWidgets.QWidget()
        self.tab_edge.setObjectName("tab_edge")
        self.edge_hlayout = QtWidgets.QHBoxLayout(self.tab_edge)
        self.edge_hlayout.setObjectName("edge_hlayout")
        self.edge_vlayout_left = QtWidgets.QVBoxLayout()
        self.edge_vlayout_left.setObjectName("edge_vlayout_left")
        self.edge_filter_hlayout = QtWidgets.QHBoxLayout()
        self.edge_filter_hlayout.setObjectName("edge_filter_hlayout")
        self.edge_filter_edit = QtWidgets.QLineEdit(self.tab_edge)
        self.edge_filter_edit.setObjectName("edge_filter_edit")
        self.edge_filter_hlayout.addWidget(self.edge_filter_edit)

        self.edge_filter_button = QtWidgets.QPushButton(self.tab_edge)
        self.edge_filter_button.setObjectName("edge_filter_button")
        self.edge_filter_button.clicked.connect( lambda: self.selection_list_filter(self.edge_selection_list, self.edge_filter_edit.text()))

        self.edge_filter_hlayout.addWidget(self.edge_filter_button)
        self.edge_vlayout_left.addLayout(self.edge_filter_hlayout)
        self.edge_selection_list = QtWidgets.QListWidget(self.tab_edge)
        self.edge_selection_list.setObjectName("edge_selection_list")
        self.edge_selection_list_init()
        self.edge_vlayout_left.addWidget(self.edge_selection_list)
        self.edge_hlayout.addLayout(self.edge_vlayout_left, 4)

        self.edge_vlayout_right = QtWidgets.QVBoxLayout()
        self.edge_vlayout_right.setObjectName("edge_vlayout_right")
        self.edge_verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.edge_verticalLayout_3.setObjectName("edge_verticalLayout_3")
        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.edge_verticalLayout_3.addItem(spacerItem1)
        self.edge_label_5 = QtWidgets.QLabel(self.tab_edge)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.edge_label_5.sizePolicy().hasHeightForWidth())
        self.edge_label_5.setSizePolicy(sizePolicy)
        self.edge_label_5.setObjectName("edge_label_5")
        self.edge_verticalLayout_3.addWidget(self.edge_label_5)
        self.edge_horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.edge_horizontalLayout_4.setObjectName("edge_horizontalLayout_4")
        self.edge_label_4 = QtWidgets.QLabel(self.tab_edge)
        self.edge_label_4.setObjectName("edge_label_4")
        self.edge_horizontalLayout_4.addWidget(self.edge_label_4)
        self.spinBox_2 = QtWidgets.QSpinBox(self.tab_edge)
        self.spinBox_2.setObjectName("spinBox_2")
        self.edge_horizontalLayout_4.addWidget(self.spinBox_2)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.edge_horizontalLayout_4.addItem(spacerItem2)
        self.edge_verticalLayout_3.addLayout(self.edge_horizontalLayout_4)
        spacerItem3 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.edge_verticalLayout_3.addItem(spacerItem3)
        self.edge_vlayout_right.addLayout(self.edge_verticalLayout_3)
        self.edge_verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.edge_verticalLayout_2.setObjectName("edge_verticalLayout_2")
        self.edge_horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.edge_horizontalLayout_6.setObjectName("edge_horizontalLayout_6")
        self.edge_checkBox_2 = QtWidgets.QCheckBox(self.tab_edge)
        self.edge_checkBox_2.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.edge_checkBox_2.setObjectName("edge_checkBox_2")
        self.edge_horizontalLayout_6.addWidget(self.edge_checkBox_2)
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.edge_horizontalLayout_6.addItem(spacerItem4)
        self.edge_verticalLayout_2.addLayout(self.edge_horizontalLayout_6)
        self.edge_horizontalLayout_7 = QtWidgets.QHBoxLayout()
        self.edge_horizontalLayout_7.setObjectName("edge_horizontalLayout_7")
        self.edge_label_2 = QtWidgets.QLabel(self.tab_edge)
        self.edge_label_2.setObjectName("edge_label_2")
        self.edge_horizontalLayout_7.addWidget(self.edge_label_2)
        self.spinBox = QtWidgets.QSpinBox(self.tab_edge)
        self.spinBox.setObjectName("spinBox")
        self.edge_horizontalLayout_7.addWidget(self.spinBox)
        spacerItem5 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.edge_horizontalLayout_7.addItem(spacerItem5)
        self.edge_verticalLayout_2.addLayout(self.edge_horizontalLayout_7)
        self.edge_horizontalLayout_8 = QtWidgets.QHBoxLayout()
        self.edge_horizontalLayout_8.setObjectName("edge_horizontalLayout_8")
        self.edge_label_3 = QtWidgets.QLabel(self.tab_edge)
        self.edge_label_3.setObjectName("edge_label_3")
        self.edge_horizontalLayout_8.addWidget(self.edge_label_3)
        self.edge_fontComboBox = QtWidgets.QFontComboBox(self.tab_edge)
        self.edge_fontComboBox.setObjectName("edge_fontComboBox")
        self.edge_horizontalLayout_8.addWidget(self.edge_fontComboBox)
        edge_spacerItem6 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.edge_horizontalLayout_8.addItem(edge_spacerItem6)
        self.edge_verticalLayout_2.addLayout(self.edge_horizontalLayout_8)
        edge_spacerItem7 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.edge_verticalLayout_2.addItem(edge_spacerItem7)
        self.edge_vlayout_right.addLayout(self.edge_verticalLayout_2)
        self.edge_hlayout.addLayout(self.edge_vlayout_right, 6)


        self.edge_build_button = QtWidgets.QPushButton(self.tab_layout)
        self.edge_build_button.setObjectName("edge_build_button")
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.edge_build_button.sizePolicy().hasHeightForWidth())
        self.edge_build_button.setSizePolicy(sizePolicy)
        self.edge_build_button.clicked.connect(self.runComputeAndDisplayGraph)
        self.edge_hlayout.addWidget(self.edge_build_button, 1)

        self.main_tab_widget.addTab(self.tab_edge, "")
        self.verticalLayout.addWidget(self.main_tab_widget, 30)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.main_tab_widget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # Compute then display graph
        self.runComputeAndDisplayGraph()


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.layout_filter_button.setText(_translate("MainWindow", "Filter"))
        self.main_tab_widget.setTabText(self.main_tab_widget.indexOf(self.tab_layout), _translate("MainWindow", "Layout"))
        self.attr_filter_attr_button.setText(_translate("MainWindow", "Filter"))
        self.label.setText(_translate("MainWindow", "Color incoming"))
        self.attr_scale_with_size_checkbox.setText(_translate("MainWindow", "Scale with size"))
        self.attr_filter_label.setText(_translate("MainWindow", "Filter"))
        self.main_tab_widget.setTabText(self.main_tab_widget.indexOf(self.tab_attrib), _translate("MainWindow", "Attribute"))
        self.node_filter_button.setText(_translate("MainWindow", "Filter"))
        self.edge_filter_button.setText(_translate("MainWindow", "Filter"))
        self.label_5.setText(_translate("MainWindow", "Node color"))
        self.edge_label_5.setText(_translate("MainWindow", "Edge color"))
        self.label_4.setText(_translate("MainWindow", "Node size"))
        self.edge_label_4.setText(_translate("MainWindow", "Edge size"))
        self.checkBox_2.setText(_translate("MainWindow", "Show label"))
        self.edge_checkBox_2.setText(_translate("MainWindow", "Show label"))
        self.label_2.setText(_translate("MainWindow", "Label size"))
        self.edge_label_2.setText(_translate("MainWindow", "Label size"))
        self.label_3.setText(_translate("MainWindow", "Label font"))
        self.edge_label_3.setText(_translate("MainWindow", "Label font"))

        self.layout_build_button.setText(_translate("MainWindow", "Build"))
        self.attrib_build_button.setText(_translate("MainWindow", "Build"))
        self.edge_build_button.setText(_translate("MainWindow", "Build"))
        self.node_build_button.setText(_translate("MainWindow", "Build"))

        self.main_tab_widget.setTabText(self.main_tab_widget.indexOf(self.tab_node_edge), _translate("MainWindow", "Node"))
        self.main_tab_widget.setTabText(self.main_tab_widget.indexOf(self.tab_edge),
                                        _translate("MainWindow", "Edge"))

    class Graph_computer_worker(QObject):
        finished = pyqtSignal()

        def __init__(self, ui_window):
            super().__init__()
            self.ui_window = ui_window

        def run(self):
            """Long-running task."""
            print("Loading")
            # Change button display

            #currentLayout = self.list_layout[self.ui_window.layout_selection_list.currentRow()]
            build_graph.draw_graph(self.ui_window.graph)
            print("Diplaying")
            self.finished.emit()

    def runComputeAndDisplayGraph(self):
        # Step 2: Create a QThread object
        self.thread = QThread()
        # Step 3: Create a worker object
        self.worker = Ui_MainWindow.Graph_computer_worker(self)
        # Step 4: Move worker to the thread
        self.worker.moveToThread(self.thread)
        # Step 5: Connect signals and slots
        self.thread.started.connect(self.worker.run)
        self.worker.finished.connect(self.thread.quit)
        self.worker.finished.connect(self.worker.deleteLater)
        self.worker.finished.connect(self.display_graph)
        self.thread.finished.connect(self.thread.deleteLater)
        # Step 6: Start the thread
        self.thread.start()

        # Set build button to building
        self.layout_build_button.setText("Building")
        self.layout_build_button.setEnabled(False)

        self.attrib_build_button.setText("Building")
        self.attrib_build_button.setEnabled(False)

        self.edge_build_button.setText("Building")
        self.edge_build_button.setEnabled(False)

        self.node_build_button.setText("Building")
        self.node_build_button.setEnabled(False)

    def display_graph(self):
        self.webEngineView.load(QtCore.QUrl().fromLocalFile(str(pathlib.Path(pathlib.Path(__file__).parent.resolve()) / r"nx.html")))

        # Set build button back to build
        self.layout_build_button.setText("Build")
        self.layout_build_button.setEnabled(True)

        self.attrib_build_button.setText("Build")
        self.attrib_build_button.setEnabled(True)

        self.edge_build_button.setText("Build")
        self.edge_build_button.setEnabled(True)

        self.node_build_button.setText("Build")
        self.node_build_button.setEnabled(True)


    def layout_selection_list_init(self):
        for l in self.list_layout:
            self.layout_selection_list.addItem(l.name)

    @staticmethod
    def layout_selection_list_on_item_click(item):
        item.setHidden(True)

    def layout_parameter_value_on_click_factory(layout_param):
        def layout_parameter_value_on_click(value):
            layout_param.start = value

        return layout_parameter_value_on_click

    @staticmethod
    def layout_parameter_boolean_on_click_factory(layout_param):
        def layout_parameter_boolean_on_click(boolean):
            layout_param.coched = boolean

        return layout_parameter_boolean_on_click

    @staticmethod
    def layout_parameter_categorical_on_click_factory(layout_param):
        def layout_parameter_categorical_on_click(pos):
            layout_param.start_choice_pos = pos

        return layout_parameter_categorical_on_click


    def layout_selection_list_on_item_click(self, item_row):
        self.layout_adaptive_display_clear()

        layout = self.list_layout[item_row]

        for p in layout.parameter_lst:
            mini_hlayout = QtWidgets.QHBoxLayout(self.tab_layout)


            # Add name
            label = QtWidgets.QLabel(self.tab_layout)
            label.setObjectName("Label_{}".format(p.name))
            label.setText("{}: ".format(p.name))
            mini_hlayout.addWidget(label)

            #Layout_parameter_value
            if p.data_type == 0:
                spinbox = QtWidgets.QDoubleSpinBox (self.tab_layout)
                spinbox.setObjectName("Spinbox_{}".format(p.name))
                spinbox.setMaximum(p.maximum)
                spinbox.setMinimum(p.minimum)
                spinbox.setValue(p.start)
                spinbox.valueChanged.connect(Ui_MainWindow.layout_parameter_value_on_click_factory(p))
                mini_hlayout.addWidget(spinbox)

            #Layout_parameter_boolean
            elif p.data_type == 1:
                checkbox = QtWidgets.QCheckBox(self.tab_layout)
                checkbox.setObjectName("Checkbox_{}".format(p.name))
                checkbox.setChecked(p.coched)
                checkbox.clicked.connect(Ui_MainWindow.layout_parameter_boolean_on_click_factory(p))
                mini_hlayout.addWidget(checkbox)

            #Layout_parameter_categorical
            elif p.data_type == 2:
                combobox = QtWidgets.QComboBox(self.tab_layout)
                combobox.setObjectName("ComboBox_{}".format(p.name))
                for choice in p.list_choice:
                    combobox.addItem(choice)
                combobox.setCurrentIndex(p.start_choice_pos)
                combobox.currentIndexChanged.connect(Ui_MainWindow.layout_parameter_categorical_on_click_factory(p))
                mini_hlayout.addWidget(combobox)

            else:
                raise Exception("ERROR: INVALID LAYOUT PARAMETER")

            # Add spacer to stick widget to the left
            spacer = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
            mini_hlayout.addSpacerItem(spacer)

            self.layout_layout_right.addLayout(mini_hlayout)
            self.layout_layout_right_widget_lst.append(mini_hlayout)

    def layout_adaptive_display_clear(self):
        for w in self.layout_layout_right_widget_lst:
            for i in reversed(range(w.count())):
                w.removeWidget(w.itemAt(i).widget())

            self.layout_layout_right.removeItem(w)

        self.layout_layout_right_widget_lst = []


    def attr_selection_list_init(self):
        self.attr_selection_list.addItem("Betweenness Centrality")
        self.attr_selection_list.addItem("Communities")
        self.attr_selection_list.addItem("Clustering coefficient")
        self.attr_selection_list.addItem("Degree of Node")
        self.attr_selection_list.addItem("Minimum Spanning Tree")
        self.attr_selection_list.addItem("Shortest Path")

    @staticmethod
    def attr_selection_list_on_item_click(item):
        item.setHidden(True)

    def node_selection_list_init(self):
        self.node_selection_list.addItem("(All nodes)")
        for n in self.graph.nodes:
            self.node_selection_list.addItem(str(n))

        self.node_selection_list.sortItems()

    @staticmethod
    def node_selection_list_on_item_click(item):
        item.setHidden(True)

    def edge_selection_list_init(self):
        for e in self.graph.edges:
            self.edge_selection_list.addItem(str(e))

        self.node_selection_list.sortItems()

    @staticmethod
    def edge_selection_list_on_item_click(item):
        item.setHidden(True)

    @staticmethod
    def selection_list_filter(selection_list, filtering_str):
        for i in range(selection_list.count()):
            item = selection_list.item(i)
            item.setHidden(filtering_str != item.text()[:len(filtering_str)])

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    app.setStyle('Fusion')
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
